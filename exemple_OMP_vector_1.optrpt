Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Begin optimization report for: main()

    Report from: Vector optimizations [vec]


LOOP BEGIN at exemple_OMP_vector_1.c(48,1)
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_1.c(49,11) ]
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_1.c(49,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.009
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 2.280 
   remark #15487: type converts: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at exemple_OMP_vector_1.c(54,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ exemple_OMP_vector_1.c(55,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at exemple_OMP_vector_1.c(21,2) inlined into exemple_OMP_vector_1.c(61,1)
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_1.c(23,3) ]
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_1.c(23,3) ]
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_1.c(23,3) ]
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_1.c(23,3) ]
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_1.c(23,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 4 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 41 
   remark #15477: vector loop cost: 30.500 
   remark #15478: estimated potential speedup: 1.340 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at exemple_OMP_vector_1.c(66,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ exemple_OMP_vector_1.c(67,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: vec0(int *, int *, int, int)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at exemple_OMP_vector_1.c(21,2)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: vec1(int *, int *, int, int)

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at exemple_OMP_vector_1.c(32,2)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================
