Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Begin optimization report for: main()

    Report from: Vector optimizations [vec]


LOOP BEGIN at exemple_OMP_vector_1_1.c(16,3) inlined into exemple_OMP_vector_1_1.c(61,3)
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_1_1.c(17,6) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.018
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 1.750 
   remark #15478: estimated potential speedup: 3.410 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at exemple_OMP_vector_1_1.c(16,3) inlined into exemple_OMP_vector_1_1.c(62,3)
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_1_1.c(17,6) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.018
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 1.750 
   remark #15478: estimated potential speedup: 3.410 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at exemple_OMP_vector_1_1.c(66,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ exemple_OMP_vector_1_1.c(67,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at exemple_OMP_vector_1_1.c(38,7) inlined into exemple_OMP_vector_1_1.c(73,2)
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_1_1.c(39,4) ]
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_1_1.c(39,4) ]
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_1_1.c(39,4) ]
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_1_1.c(39,4) ]
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_1_1.c(39,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 4 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 12 
   remark #15477: vector loop cost: 2.250 
   remark #15478: estimated potential speedup: 5.330 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at exemple_OMP_vector_1_1.c(78,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ exemple_OMP_vector_1_1.c(79,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at exemple_OMP_vector_1_1.c(24,3) inlined into exemple_OMP_vector_1_1.c(84,9)
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_1_1.c(25,6) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.775
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 1.250 
   remark #15478: estimated potential speedup: 3.350 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: checksum(float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at exemple_OMP_vector_1_1.c(24,3)
   remark #15389: vectorization support: reference b has unaligned access   [ exemple_OMP_vector_1_1.c(25,6) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 8
   remark #15309: vectorization support: normalized vectorization overhead 0.708
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 3.390 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: vec0(float *__restrict__, float *, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at exemple_OMP_vector_1_1.c(38,2)
   remark #15389: vectorization support: reference a has unaligned access   [ exemple_OMP_vector_1_1.c(39,4) ]
   remark #15389: vectorization support: reference a has unaligned access   [ exemple_OMP_vector_1_1.c(39,4) ]
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_1_1.c(39,4) ]
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_1_1.c(39,4) ]
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_1_1.c(39,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 6.440 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at exemple_OMP_vector_1_1.c(38,2)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference a has unaligned access   [ exemple_OMP_vector_1_1.c(39,4) ]
   remark #15389: vectorization support: reference a has unaligned access   [ exemple_OMP_vector_1_1.c(39,4) ]
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_1_1.c(39,4) ]
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_1_1.c(39,4) ]
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_1_1.c(39,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.727
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at exemple_OMP_vector_1_1.c(38,2)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: vec1(float *, float *, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at exemple_OMP_vector_1_1.c(48,2)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at exemple_OMP_vector_1_1.c(48,2)
<Multiversioned v1>
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_1_1.c(49,4) ]
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_1_1.c(49,4) ]
   remark #15389: vectorization support: reference b has unaligned access   [ exemple_OMP_vector_1_1.c(49,4) ]
   remark #15389: vectorization support: reference b has unaligned access   [ exemple_OMP_vector_1_1.c(49,4) ]
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_1_1.c(49,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.909
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 21 
   remark #15477: vector loop cost: 2.750 
   remark #15478: estimated potential speedup: 6.860 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at exemple_OMP_vector_1_1.c(48,2)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at exemple_OMP_vector_1_1.c(48,2)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_1_1.c(49,4) ]
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_1_1.c(49,4) ]
   remark #15389: vectorization support: reference b has unaligned access   [ exemple_OMP_vector_1_1.c(49,4) ]
   remark #15389: vectorization support: reference b has unaligned access   [ exemple_OMP_vector_1_1.c(49,4) ]
   remark #15389: vectorization support: reference b has unaligned access   [ exemple_OMP_vector_1_1.c(49,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.864
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at exemple_OMP_vector_1_1.c(48,2)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at exemple_OMP_vector_1_1.c(48,2)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at exemple_OMP_vector_1_1.c(48,2)
<Remainder, Multiversioned v2>
LOOP END
===========================================================================

Begin optimization report for: init(float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at exemple_OMP_vector_1_1.c(16,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at exemple_OMP_vector_1_1.c(16,3)
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_1_1.c(17,6) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.786
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 1.750 
   remark #15478: estimated potential speedup: 3.590 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at exemple_OMP_vector_1_1.c(16,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_1_1.c(17,6) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.222
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at exemple_OMP_vector_1_1.c(16,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================
