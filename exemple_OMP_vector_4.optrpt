Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at exemple_OMP_vector_4.c(56,2)
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_4.c(57,11) ]
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_4.c(57,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.075
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 10 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 3.990 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at exemple_OMP_vector_4.c(62,2)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ exemple_OMP_vector_4.c(63,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at exemple_OMP_vector_4.c(15,2) inlined into exemple_OMP_vector_4.c(68,3)
<Multiversioned v1>
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_4.c(16,6) ]
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_4.c(16,6) ]
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_4.c(16,6) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at exemple_OMP_vector_4.c(15,2) inlined into exemple_OMP_vector_4.c(68,3)
<Multiversioned v1>
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_4.c(16,6) ]
   remark #15389: vectorization support: reference a has unaligned access   [ exemple_OMP_vector_4.c(16,6) ]
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_4.c(16,6) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.107
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 1.750 
   remark #15478: estimated potential speedup: 3.420 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at exemple_OMP_vector_4.c(15,2) inlined into exemple_OMP_vector_4.c(68,3)
<Multiversioned v3>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at exemple_OMP_vector_4.c(72,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ exemple_OMP_vector_4.c(73,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at exemple_OMP_vector_4.c(79,8)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at exemple_OMP_vector_4.c(79,8)
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_4.c(80,5) ]
   remark #15388: vectorization support: reference a has aligned access   [ exemple_OMP_vector_4.c(80,5) ]
   remark #15388: vectorization support: reference b has aligned access   [ exemple_OMP_vector_4.c(80,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 2.250 
   remark #15478: estimated potential speedup: 2.650 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at exemple_OMP_vector_4.c(84,3)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ exemple_OMP_vector_4.c(85,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: foo(float *, float *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at exemple_OMP_vector_4.c(15,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between a line 16 and a line 16
   remark #15346: vector dependence: assumed ANTI dependence between a line 16 and a line 16
LOOP END
===========================================================================

Begin optimization report for: foo_2(int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at exemple_OMP_vector_4.c(22,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between a line 23 and b line 23
   remark #15346: vector dependence: assumed ANTI dependence between b line 23 and a line 23
LOOP END
===========================================================================

Begin optimization report for: vec0(int *, int *, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at exemple_OMP_vector_4.c(35,4)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between a line 37 and a line 37
   remark #15346: vector dependence: assumed ANTI dependence between a line 37 and a line 37
LOOP END
===========================================================================
